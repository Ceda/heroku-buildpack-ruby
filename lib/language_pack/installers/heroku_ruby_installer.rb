require 'language_pack/base'
require 'language_pack/shell_helpers'

module LanguagePack::Installers; end

class LanguagePack::Installers::HerokuRubyInstaller
  BASE_URL = LanguagePack::Base::VENDOR_URL
  BIN_DIR = Pathname("bin")

  include LanguagePack::ShellHelpers
  attr_reader :fetcher

  def initialize(stack: , multi_arch_stacks: , arch: , report: HerokuBuildReport::GLOBAL, ruby_version: nil)
    @report = report
    @original_stack = stack
    @ruby_version = ruby_version

    # Special case: Ruby 2.6.6 is only available on heroku-20
    # We'll download it and add OpenSSL compatibility
    @needs_openssl_compat = (stack == "heroku-22" && ruby_version&.ruby_version == "2.6.6")
    effective_stack = @needs_openssl_compat ? "heroku-20" : stack

    if multi_arch_stacks.include?(effective_stack)
      @fetcher = LanguagePack::Fetcher.new(BASE_URL, stack: effective_stack, arch: arch)
    else
      @fetcher = LanguagePack::Fetcher.new(BASE_URL, stack: effective_stack)
    end
  end

  def install(ruby_version, install_dir)
    @report.capture(
      "ruby.version" => ruby_version.ruby_version,
      "ruby.engine" => ruby_version.engine,
      "ruby.engine.version" => ruby_version.engine_version,
      "ruby.major" => ruby_version.major,
      "ruby.minor" => ruby_version.minor,
      "ruby.patch" => ruby_version.patch,
      "ruby.default" => ruby_version.default?,
    )
    fetch_unpack(ruby_version, install_dir)
    setup_binstubs(install_dir)

    # Install OpenSSL compatibility for Ruby 2.6.6 on heroku-22
    if @needs_openssl_compat
      install_openssl_compat(install_dir)
    end
  end

  def fetch_unpack(ruby_version, install_dir)
    FileUtils.mkdir_p(install_dir)
    Dir.chdir(install_dir) do
      @fetcher.fetch_untar("#{ruby_version.version_for_download}.tgz")
    end
  end

  private def setup_binstubs(install_dir)
    BIN_DIR.mkpath
    run("ln -s ruby #{install_dir}/bin/ruby.exe")

    install_pathname = Pathname.new(install_dir)
    Dir["#{install_dir}/bin/*"].each do |vendor_bin|
      # for Ruby 2.6.0+ don't symlink the Bundler bin so our shim works
      next if vendor_bin.include?("bundle")

      # The bin/rake binstub generated when compiling ruby does not load bundler
      # which can cause unexpected failures. Deleting this binstub allows two things:
      #
      #   - If the app includes a custom binstub allows it to be used
      #   - If the app does not include a custom binstub, then it will fall back to vendor/bundle/bin/rake
      #     which is generated by bundler
      #
      # Discussion: https://github.com/heroku/heroku-buildpack-ruby/issues/1025#issuecomment-653102430
      next if vendor_bin.include?("rake")

      if install_pathname.absolute?
        run("ln -s #{vendor_bin} #{BIN_DIR}")
      else
        run("ln -s ../#{vendor_bin} #{BIN_DIR}")
      end
    end
  end

  private

  def install_openssl_compat(install_dir)
    puts "-----> Installing OpenSSL compatibility layer for Ruby 2.6.6"

    # Create lib directory for OpenSSL libraries
    compat_lib_dir = File.join(install_dir, "compat", "lib")
    FileUtils.mkdir_p(compat_lib_dir)

    begin
      Dir.chdir(compat_lib_dir) do
        puts "       Downloading OpenSSL 1.1.1 libraries from Ubuntu 20.04"

        # Download OpenSSL 1.1.1 from Ubuntu 20.04 archives
        # These are the specific files that Ruby 2.6.6 needs
        openssl_packages = {
          "libssl1.1" => "http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb",
          "libcrypto1.1" => "http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.20_amd64.deb"
        }

        # Download and extract OpenSSL package
        run!("curl -L --fail --retry 3 --retry-connrefused --connect-timeout 10 --max-time 60 -s #{openssl_packages["libssl1.1"]} -o openssl.deb")
        run!("ar x openssl.deb")
        run!("tar xf data.tar.xz")

        # Move the libraries to our compat directory
        if File.exist?("usr/lib/x86_64-linux-gnu/libssl.so.1.1")
          FileUtils.cp("usr/lib/x86_64-linux-gnu/libssl.so.1.1", ".")
          FileUtils.cp("usr/lib/x86_64-linux-gnu/libcrypto.so.1.1", ".")
          puts "       ✓ OpenSSL 1.1.1 libraries extracted successfully"
        else
          puts "       ⚠ OpenSSL libraries not found in expected location"
        end

        # Clean up temporary files
        FileUtils.rm_rf(["usr", "control.tar.gz", "data.tar.xz", "debian-binary", "openssl.deb"])
      end

      # Create a Ruby wrapper script that sets up the environment
      wrapper_path = File.join(install_dir, "bin", "ruby_with_openssl")
      File.open(wrapper_path, "w") do |f|
        f.write <<~WRAPPER
          #!/bin/bash
          export LD_LIBRARY_PATH="#{File.join(install_dir, "compat", "lib")}:$LD_LIBRARY_PATH"
          exec "#{File.join(install_dir, "bin", "ruby")}" "$@"
        WRAPPER
      end
      FileUtils.chmod(0755, wrapper_path)
      puts "       ✓ Created Ruby wrapper with OpenSSL compatibility"

    rescue => e
      puts "       ⚠ Failed to install OpenSSL compatibility: #{e.message}"
      puts "       Continuing with system OpenSSL..."
    end
  end
end
